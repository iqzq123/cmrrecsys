<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="800" height="500"
	 showCloseButton="true" close="closeHandle()" creationPolicy="all">
	 <mx:Script>
	 	<![CDATA[
	 	import mx.controls.Button;
		import mx.charts.BubbleChart;
		import mx.controls.Label;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
		import SNADisplay.org.utils.Colour;
		import SNADisplay.component.DataGridWindow;
        import mx.core.UIComponent;
        import mx.controls.Alert;
        
       		private var chaptNameLabelAttr:Array = new Array;
			private var chaptPropLabelAttr:Array = new Array;
			private var chaptPropAttr:Array = new Array;
			private var runOffRatioAttr:Array = new Array;
			private const LEVEL_SCALE:Number = 0.75;
			private var xmlData:XML;
			
			
			public function drawTundish(bookXML:XML):void {
				var chaptNameLabel:Label;
				var chaptPropLabel:Label;
				var runOffRatioLabel:Label;
				
				for each(var chaptXML:XML in bookXML.child("chaptEmt") ) {
					var chaptName:String = new String(chaptXML.attribute("chaptName"));
					var userNum:Number = new Number(chaptXML.attribute("userNum"));
					var runOffRatio:Number = new Number(chaptXML.attribute("runOffRatio"));
					var propotion:Number = new Number(chaptXML.attribute("propotion"));
					
					chaptNameLabel = new Label;
					chaptNameLabel.setStyle("fontSize",12);
					chaptNameLabel.text = chaptName;
					chaptNameLabelAttr.push(chaptNameLabel);
					this.addChild(chaptNameLabel);
					
					chaptPropLabel = new Label;
					chaptPropLabel.setStyle("fontSize",12);
					chaptPropLabel.text = (propotion*100) + "% (" + userNum + ")";
					chaptPropLabelAttr.push(chaptPropLabel);
					this.addChild(chaptPropLabel);
					
					chaptPropAttr.push(propotion);
					
					runOffRatioLabel = new Label;
					runOffRatioLabel.setStyle("fontSize",12);
					runOffRatioLabel.text = "流失率"+(runOffRatio*100) + "%";
					runOffRatioAttr.push(runOffRatioLabel);
					this.addChild(runOffRatioLabel);
				}
				this.validateNow();
				draw();
			}
			
			public function draw():void {
				var per:Number;
				
   				var startX:int = canvas.x + canvas.width*0.2;
   				var startY:int = canvas.y + 20;
   				var width:int = canvas.width*0.6;
   				var height:int = canvas.height - 40;
				var nameLabel:Label;
				var propLabel:Label;
				var runOffRatioLabel:Label;
				for(var i:int = 0;i<chaptNameLabelAttr.length;i++){
					per = chaptPropAttr[i];
					drawLevel(per, i, chaptNameLabelAttr.length, startX, startY, width, height);
					
					nameLabel = chaptNameLabelAttr[i];
					nameLabel.x = canvas.x+40;
					nameLabel.y = startY + height / chaptNameLabelAttr.length * ( i  ) ;
					
					propLabel = chaptPropLabelAttr[i];
					propLabel.x =  canvas.width/2 - propLabel.width/2;
					propLabel.y = startY + height / chaptNameLabelAttr.length * ( i  ) ;
					
					runOffRatioLabel = runOffRatioAttr[i];
					runOffRatioLabel.x = canvas.width*0.8 + 5;
					runOffRatioLabel.y = startY + height / chaptNameLabelAttr.length * ( i  ) ;
				}
			}
			
			private function drawLevel(per:Number, levNum:int, totalNum:int, startX:int, startY:int, width:int, height:int):void {
   			var x:Number;
   			var y:Number;
   			var h:Number = height/totalNum;
   			var w:Number;
   			if ( per > 0.1 ) {
   				w = width*per;
	   			x = startX + width*(1 - per)/2;
	   			y = startY + h*levNum;
	   			drawComp.graphics.lineStyle(2,Colour.GRAY,1);
	   			drawComp.graphics.beginFill(Colour.LIGHT_BLUE,0.5);
	   			drawComp.graphics.moveTo(x,y);
	   			drawComp.graphics.lineTo(x+w*0.15,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w*0.85,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w,y);
	   			drawComp.graphics.lineTo(x,y);
	   			drawComp.graphics.endFill();
   			}
   			else if ( per > 0.03 ){
   				w = width*per;
	   			x = startX + width*(1 - per)/2;
	   			y = startY + h*levNum;
	   			drawComp.graphics.lineStyle(2,Colour.GRAY,1);
	   			drawComp.graphics.beginFill(Colour.LIGHT_BLUE,0.5);
	   			drawComp.graphics.moveTo(x,y);
	   			drawComp.graphics.lineTo(x,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w,y);
	   			drawComp.graphics.lineTo(x,y);
	   			drawComp.graphics.endFill();
   			}
   			else {
   				per = 0.03;
   				w = width*per;
	   			x = startX + width*(1 - per)/2;
	   			y = startY + h*levNum;
	   			drawComp.graphics.lineStyle(2,Colour.GRAY,1);
	   			drawComp.graphics.beginFill(Colour.LIGHT_BLUE,0.5);
	   			drawComp.graphics.moveTo(x,y);
	   			drawComp.graphics.lineTo(x,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w,y+h*LEVEL_SCALE);
	   			drawComp.graphics.lineTo(x+w,y);
	   			drawComp.graphics.lineTo(x,y);
	   			drawComp.graphics.endFill();
   			}
   		}
   		
        private function closeHandle():void {
   			PopUpManager.removePopUp(this);
   		}
	 	]]>
	 </mx:Script>
	<mx:Canvas id="canvas" width="100%" height="100%">
		<mx:UIComponent id="drawComp" />
	</mx:Canvas> 
</mx:TitleWindow>
